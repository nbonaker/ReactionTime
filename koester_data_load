import pandas as pd
from pandas import ExcelWriter
from pandas import ExcelFile
from matplotlib import pyplot as plt
import seaborn as sns
from scipy import stats
import numpy as np
import math
from pickle_util import PickleUtil


DF = pd.read_excel('data/koester_data.xlsx', sheetname='Sheet1')

plt.rcParams.update({'font.size': 22})


def calc_percentile(kernel, percentile, resolution=0.001):
    pdf = kernel(np.arange(1/resolution)*2.1)

    cdf = np.cumsum(pdf*2.1)
    return np.min(np.where(cdf >= percentile))*2.1


def plot_data(data, color="rosybrown", label="Response Time"):
    print(data)
    avg_mean = np.average(data)
    avg_std = np.std(data)
    x = np.arange(0, 2100, 1)
    norm_dist = stats.norm(loc=avg_mean, scale=avg_std)

    plt.plot(x, stats.norm(np.mean(data), np.std(data)).pdf(x), lw=3, label=label, c=color)


    # plt.axvline(avg_mean, color=color, linestyle="--", alpha=0.8, label=label+" Mean ("+str(int(avg_mean))+"ms)", linewidth=2)

fig, ax = plt.subplots()
fig.set_size_inches(10, 8)


df = DF[DF["phase"] == 2]

print("Column headings:", list(df.columns))

mi_data = df[df['MI'] == True]
mi_response_data = mi_data["avgTrialTime"].values - mi_data["avgResponseTime"].values
n = len(mi_response_data)

nmi_data = df[df['MI'] == False]
nmi_response_data = nmi_data["avgTrialTime"].values - nmi_data["avgResponseTime"].values



palette = sns.cubehelix_palette(1, start=-4.2, dark=0.6, light=0.7, reverse=True)
palette += sns.cubehelix_palette(1, start=-3.3, dark=0.6, light=0.7, reverse=True)
palette += sns.cubehelix_palette(1, start=-2.5, dark=0.6, light=0.7, reverse=True)

sns.set_palette(palette)
#
# plt.axvline(mean, color="rosybrown", label="Cam Switch Mean SRT ("+str(int(mean))+"ms)")
# plot_data(nmi_response_data, color="steelblue", label="Able-Bodied Averaged SRT")
heights, bins = np.histogram(nmi_response_data, 5, density=True)
bar_width = (max(bins) - min(bins))/5
plt.bar(bins[1:], -2*heights, width=bar_width, color="steelblue", alpha=0.8, label="Able-Bodied Averaged DPT")

# plt.axvline(mean, color="steelblue", label="Button Mean SRT ("+str(int(mean))+"ms)")
# plot_data(mi_response_data, color="rosybrown", label="Motor Impaired Averaged SRT")
heights, bins = np.histogram(mi_response_data, 10, density=True)
bar_width = (max(bins) - min(bins))/10
plt.bar(bins[1:], -2*heights, width=bar_width, color="rosybrown", alpha=0.8, label="Motor Impaired Averaged DPT")



data_file = "data/0/dp_times.p"
reaction_data = PickleUtil(data_file).safe_load()
reaction_data = np.array(reaction_data) * 1000
reaction_data = reaction_data[np.where(reaction_data < 2000)]

sns.distplot(reaction_data, kde=False, fit=stats.norm, label="Button DPT", color=palette[0], ax=ax)

data_file = "data/1/recovery_time_953.p"
reaction_data = PickleUtil(data_file).safe_load()
reaction_data = np.array(reaction_data) * 1000
reaction_data = reaction_data[np.where(reaction_data < 1500)]

sns.distplot(reaction_data, kde=False, fit=stats.norm, label="WebCam DPT", color=palette[1], ax=ax, bins=15)
#
#
data_file = "data/2001/recovery_time_2001.p"
reaction_data = PickleUtil(data_file).safe_load()
reaction_data = np.array(reaction_data) * 1000
reaction_data = reaction_data[np.where(reaction_data > 250)]
reaction_data = reaction_data[np.where(reaction_data < 1500)]

sns.distplot(reaction_data, kde=False, fit=stats.norm, label="WebCam Wide Motion DPT", color=palette[2], ax=ax, bins=10)
#

plt.axhline(0, color="black", linewidth=1)
plt.xscale("log")
plt.xlim(0, plt.xlim()[1])

plt.xlabel("Log Time (ms)")
plt.ylabel("Frequency")
ax.get_yaxis().set_visible(False)
plt.title("Double Press Times (DPT) of Various Switch Inputs")
#
legend_items = ax.get_legend_handles_labels()
legend_items = list(zip(legend_items[0], legend_items[1]))
labels = ['Able-Bodied Averaged DPT', 'Motor Impaired Averaged DPT',
          'Button DPT', 'WebCam DPT', 'WebCam Wide Motion DPT']
legend_items.sort(key=lambda x: labels.index(x[1]))
legend_items = list(zip(*legend_items))
plt.legend(legend_items[0], legend_items[1], loc='upper right')
plt.show()
